#!/bin/bash
# buildrepo: a set of Bash functions to play with Git
# Copyright (C) 2013  Andrew Gilbert
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# Works exactly like `echo`, except it outputs to stderr.
echoerr () {
	# Code from http://stackoverflow.com/a/2990533/2243495
	echo "$@" 1>&2
}

# Generate a random string
# Usage: nme [length]
#	length:
#	 The length of the string that should be generated. Lengths over 32
#	 will result in a 32-character string
nme () {
	# Modeled after example at http://tldp.org/LDP/abs/html/string-manipulation.html#RANDSTRING
	local length=10	# The number of characters to generate
	if [ -n "$1" ]
	then
		length="$1"
	fi
	local data=$(echo "$RANDOM" | md5sum)
	echo "${data:0:$length}"
}

# Generate a fractal image from a random seed.
# Usage: img [optional-args]
# 	optional-args:
#	 Arguments that should be passed to ppmforge to control generation of image
img () {
	local seed="$RANDOM"
	local data=$(ppmforge -seed "$seed" "$@")
	echo "$data"
}

# Generate 15 seconds of sound.
# Usage snd [optional-args]
#	optional-args:
#	 Arguments to pass to sox as effects & their arguements. Will be
#	 followed by a trim 0 15 to only save the first 15 seconds of whatever
#	 is generated.
snd () {
	local data
	if [ -z "$1" ]
	then
		data=$(sox -n -t wav - synth 15 pinknoise )
	else
		data=$(sox -n -t wav - "$@" trim 0 15)
	fi
	echo "$data"
}

# Create a file with a random name and random data. Optionally can specify one of `nme`, `img`, or `snd` to generate the file data with one of those functions.
# Usage: randomfile [nme|img|snd [optional-arguments]]
#	nme:
#	 Generates a file containing text data.
#
#	img:
#	 Generates a file containing image data.
#
#	snd:
#	 Generates a file containing sound data.
#
#	exec:
#	 Runs the remaining arguments and uses their stdout as the data for the file.
#
#	optional-arguments:
#	 Arguments as for the function of the same name as the file data type. E.g. arguments for `snd` if run with `snd` as the first argument.
randomfile () {
	local name=$(nme)
	local data
	if [ -z "$1" ]
	then
		data=$(nme)
	else
		local dataType="$1"
		shift
		# Handle possible special data types
		case "$dataType" in
			"nme")
				data=$(nme "$@")
				;;
			"img")
				data=$(img "$@")
				;;
			"snd")
				data=$(snd "$@")
				;;
			"exec")
				data=$("$@")
				;;
			*)
				data=$(nme)
				;;
		esac
	fi

	while [ -e "$name" ]
	do
		name=$(nme)
	done

	echoerr	"Creating '$name' containing '$data'..."
	echo "$data" > "$name"
}

# Make a single commit with some new `work`
# Usage: littleBusy [arguments]
#	arguments:
#	 Arguments to pass to `work`
littleBusy () {
	echoerr "Being a little busy..."

	work "$@"
	commit
}

# Make ten commits with `work`
# Usage: beBusy [arguments]
#	arguments:
#	 Arguments to pass to `work`
beBusy () {
	echoerr	"Being busy..."

	for i in {1..10}
	do
		work "$@"
		commit
	done
}

# Create five random files with `randomfile`
# Usage: work [arguments]
#	arguments:
#	 Arguments to pass to `randomfile`
work () {
	echoerr	"Working..."

	for i in {1..5}
	do
		randomfile "$@"
	done
}

# Commit everything in the repo; with no arguments, generate a commit message, with an argument, use it as the commit message.
# Usage: commit [message]
#	message:
#	 The commit message for the commit.
commit () {
	echoerr	"Committing!"

	git add . 1>&2

	if [ -z "$1" ]
	then
		git commit -m "Autocommit on $(git branch --contains)" 1>&2
	else
		git commit -m "$1" 1>&2
	fi
}

# Commit everything in the repo, adding it all to git-annex. Requires that the repo has had `git annex init` run in it.
# Usage: annexCommit [message]
#	message:
#	 The commit message for the commit.
annexCommit () {
	echoerr "Committing to annex!"

	git annex add . 1>&2

	if [ -z "$1" ]
	then
		git commit -m "Autocommit on $(git branch --contains)" 1>&2
	else
		git commit -m "$1" 1>&2
	fi
}

# Execute the argument on a randomly-named branch of its own. Return the name of the branch on STDOUT
# Usage: onBranch command [arguments...]
#	command:
#	 The command to execute on a new branch.
#
#	arguments:
#	 Arguments to the specified command.
onBranch () {
	local newBranch=$(nme)
	echoerr	"On branch $newBranch..."
	git checkout -b $newBranch 1>&2
	eval "$@"
	git checkout master 1>&2
	echo $newBranch
}

# Execute the second argument on the branch specified by the first argument
# Usage: onExistBranch branch command [arguments...]
#	branch:
#	 The branch on which to execute the specified command.
#
#	command:
#	 The command to execute on the specified branch.
#
#	arguments:
#	 Arguments to the specified command.
onExistBranch () {
	echoerr	"On branch $1..."
	git checkout $1 1>&2
	shift
	eval "$@"
	git checkout master 1>&2
}

# [DISABLED] Obliterate a git repo and everything in the current folder.
destroyGit () {
	# This is just a little too dangerous to leave unsupervised.
	#rm -Irf .git/ *
	# Noop to keep Bash happy.
	:
}

# Create a new git repo in a randomly-named folder
# Usage: setUpTestEnv [annex]
#	annex:
#	 Specify "annex" to create a git-annex-enabled repo
# Returns: The name of the directory
setUpTestEnv () {
	local name=$(nme)

	echoerr "Setting up new git repo..."

	# Create a randomly-named directory
	mkdir "$name"

	# Change into it
	cd "$name"

	# Set up a repo there.
	git init 1>&2

	#If annex requested, init it.
	if [ "$1" == "annex" ]
	then
		git annex init 1>&2
	fi

	# Move back out of it
	cd ..

	echoerr "Done setting up new repo."

	# Return the name of the directory
	echo "$name"
}
