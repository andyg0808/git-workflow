#!/bin/bash
# starter: creates a starter file to use buildrepo
# Copyright (C) 2013  Andrew Gilbert
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


# Works exactly like `echo`, except it outputs to stderr.
echoerr () {
	# Code from http://stackoverflow.com/a/2990533/2243495
	echo "$@" 1>&2
}

dir="$(dirname $0)"
lib="$dir"/"buildrepo"
summarize="$dir"/"summarize-bash-script"

echoerr "Looking in $dir for $lib"

echoerr "Creating dictionary of buildrepo functions..."

cat <<END
#!/bin/bash

# List of functions in buildrepo:
END

sed -nr -f "$summarize" "$lib"

echoerr "Adding a usage example..."
# Add a usage example
cat <<START

# Include functions from "$lib"
source '$lib'



# The rest of this file is a usage example. To convert it into runnable script,
# remove the cat line below and the END line at the end of it. It will then
# create a function called main. This could be made available by sourcing this
# file. Alternatively, remove the hash on the last line which prevents it from
# running main.


cat <<'END'
# Usage example:
main () {
START

cat <<'FINS'
	# For safety, create a new test environment
	setUpTestEnv

	# Do a little in our master branch.
	littleBusy

	# Create three features and work on each of them.
	feature1=$(onBranch beBusy)

	feature2=$(onBranch beBusy)

	feature3=$(onBranch beBusy)

	# Do a little in our master branch.
	littleBusy

	# Work more on our existing feature branches.
	onExistBranch $feature2 beBusy
	onExistBranch $feature1 beBusy

	# Yet a little more in our master branch.
	littleBusy

	# Make a release! Fork the release branch from our current master branch
	git checkout -b release
	git tag -a v1.0 -m "Our first release"

	# Return to master
	git checkout master

	# Merge feature 2 into master while compressing its history. Then delete its branch.
	git merge --squash $feature2
	git commit -m "Feature 2 done"
	git branch -D $feature2

	# Oops! We need to fix a bug in the release!
	git checkout release
	littleBusy
	git tag -a v1.1 -m "Are we ever stupid!"

	# Go back to the regular course of things:
	git checkout master

	# Feature 1 is now approved!
	git merge --squash $feature1
	git commit -m "Feature 1 done"
	git branch -D $feature1

	# Make another release
	git checkout release
	git merge master -m "Releasing version 2!"
	git tag -a v2.0 -m "Finally they approved feature 1"

	# Return to normal
	git checkout master


	# They decided they didn't want feature 3. Get rid of it.
	git branch -D $feature3
}
# Run main
#main # Uncomment this line to actually run main
END
FINS
